// Пример кода 1 
// К статье Александра Калачева (г. Барнаул) Создание беспроводной системы мониторинга – первые шаги «Бекаса»

#define INDICATOR_TIME_OUT 250;
// подключение библиотек поддержки ввода-вывода и платформы
#include <stdio.h>
#include "bsp.h"
#include "mrfi.h"

// подключение библиотек стека протоколов SimpliciTI
#include "nwk_types.h"
#include "nwk_api.h"
#include "nwk_pll.h"

// подключение библиотек UART и ввода-вывода, специфичных для платформы
#include "bsp_leds.h"
#ifdef MRFI_CC430
  #include "uart_intfc_cc430.h"
#else
  #include "uart_intfc.h"
#endif

// основная функция
void main (void)
{
  /* holds length of current message */
  uint8_t len; // длина текущего сообщения

  /* the link token */
  linkID_t LinkID = 0; // идентификатор установленной между узлами логической связи

  /* the transmit and receive buffers */
// буферы для принятых и передаваемых сообщений. Размер задаем в соответствии с максимальным размером пакета
  uint8_t rx[MAX_APP_PAYLOAD], tx[MAX_APP_PAYLOAD];

  /* holds led indicator time out counts */
  uint16_t led_tmr;

// инициализируем периферию контроллера
  BSP_Init( );
// инициализируем радиочасть контроллера и стек протоколов SimpliciTI
  SMPL_Init( NULL );
// настраиваем UART
  uart_intfc_init( );

  /* turn on the radio so we are always able to receive data asynchronously */
// включаем радио на прием
  SMPL_Ioctl( IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_RXON, NULL );
// индицируем включением светодиода
  /* turn on LED. */
  BSP_TURN_ON_LED1( );

#ifdef  LINK_TO
// код, выполняемый на узле, запрашивающем подключение
  {
    uint8_t cnt = 0;
// посылаем сообщение в UART об ожидании подключения
    tx_send_wait( "Linking to...\r\n", 15 );
// посылаем пакет-запрос на подключение до тех пор, пока не будет получен положительный ответ
    while (SMPL_SUCCESS != SMPL_Link(&LinkID))
      if( cnt++ == 0 )
      {
        /* blink LED until we link successfully */
// периодически изменяем состояние светодиода
        BSP_TOGGLE_LED1( );
      }
  }
#else // ifdef LINK_LISTEN
// код, выполняемый на узле, ожидающем подключения
// посылаем сообщение по UART об ожидании подключения
  tx_send_wait( "Listening for Link...\r\n", 23 );
// ожидаем запрос на подключение
  while (SMPL_SUCCESS != SMPL_LinkListen(&LinkID))
  {
    /* blink LED until we link successfully */
// «мигаем» светодиодом до тех пор, пока не будет осуществлено подключение
    BSP_TOGGLE_LED1( );
  }
#endif

// когда соединение произошло, посылаем сообщение по UART
  tx_send_wait( "Link Established!\r\nReady...\r\n", 29 );

  /* turn off the led */
// выключаем светодиод
  BSP_TURN_OFF_LED1( );

// переходим в основной бесконечный цикл работы: по приходу символов по беспроводному каналу узел транслирует его в UART и по приходу символа по UART он передается в эфир

  main_loop:
// метка начала основного цикла
// если принят пакет данных, то его содержимое побайтно передается по UART
    if( SMPL_Receive( LinkID, tx, &len ) == SMPL_SUCCESS )
    {
      /* blocking call but should be ok if both ends have same uart buad rate */
      tx_send_wait( tx, len );
      led_tmr = INDICATOR_TIME_OUT;   /* update activity time out */
    }

    FHSS_ACTIVE( if( nwk_pllBackgrounder( false ) != false ) );
    {
      /* check to see if the host has sent any characters and if it has
      * then send them over the radio link and reset indicator timeout.
      */
// в том случае, если по UART приняты символы/данные, передаем их в эфир
      len = rx_receive( rx, MAX_APP_PAYLOAD );
      if( len != 0 )
      {
        while( SMPL_Send( LinkID, rx, len ) != SMPL_SUCCESS ) ;
        led_tmr = INDICATOR_TIME_OUT;   /* update activity time out */
// делаем небольшую паузу после передачи для возможного приема пакетов
// отсутствие паузы может привести к потере символов, переданных вторым узлом по радиоканалу
        MRFI_DelayMs( 5 );
      }
    }
    
    /* manage led indicator */
// периодически «мигаем» светодиодом
    if( led_tmr != 0 )
    {
      led_tmr--;
      BSP_TURN_ON_LED1( );
    }
    else
      BSP_TURN_OFF_LED1( );

    goto main_loop; /* do it again and again and again and ... */
}
